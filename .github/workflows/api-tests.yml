name: API Tests

on:
  push:
    branches: [ main, master ]
  pull_request:
    branches: [ main, master ]

jobs:
  api-tests:
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v5.0.0

      - name: Create .env file for docker-compose
        run: |
          cat > .env << EOF
          # PostgreSQL Configuration
          POSTGRES_USER=postgres
          POSTGRES_PASSWORD=postgres
          POSTGRES_DB=rain_tracker
          POSTGRES_PORT=5432

          # Application Configuration
          DATABASE_URL=postgres://postgres:postgres@postgres:5432/rain_tracker
          SERVER_HOST=0.0.0.0
          SERVER_PORT=8080
          BIND_ADDRESS=0.0.0.0:8080

          # Gauge Data Sources
          GAUGE_URL=https://alert.fcd.maricopa.gov/php/showdata4.php?ID=59700&NM=1000
          GAUGE_LIST_URL=https://alert.fcd.maricopa.gov/alert/Rain/ev_rain.txt

          # Fetch Intervals
          FETCH_INTERVAL_MINUTES=15
          GAUGE_LIST_INTERVAL_MINUTES=60

          RUST_LOG=info
          EOF

      - name: Start services with docker-compose
        run: |
          docker-compose up -d --build
          echo "Waiting for services to be healthy..."

      - name: Wait for app to be healthy
        run: |
          timeout 120 bash -c 'until docker-compose ps | grep rain-tracker-service | grep -q "healthy"; do
            echo "Waiting for app to be healthy...";
            sleep 5;
          done'
          echo "App is healthy!"

      - name: Verify app is responding
        run: |
          curl -f http://localhost:8080/api/v1/health
          echo "Health check passed!"

      - name: Install ijhttp CLI
        run: |
          curl -f -L -o ijhttp.zip "https://jb.gg/ijhttp/latest"
          unzip -q ijhttp.zip
          chmod +x ijhttp
          ./ijhttp --version

      - name: Run HTTP Client tests
        run: |
          ./ijhttp http/api-tests.http --env ci --env-file http/http-client.env.json --report

      - name: Show docker-compose logs on failure
        if: failure()
        run: |
          echo "=== App Logs ==="
          docker-compose logs app
          echo "=== Database Logs ==="
          docker-compose logs postgres

      - name: Cleanup
        if: always()
        run: |
          docker-compose down -v
